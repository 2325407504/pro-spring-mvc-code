apply plugin: 'base'

springVersion='3.1.0.RELEASE'
tilesVersion='2.2.2'
springSecurityVersion='3.1.0.RELEASE'
springSwfVersion='2.3.0.RELEASE'
hibernateVersion='4.1.0.Final'
hibernateValidatorVersion='4.2.0.Final'
ehCacheVersion='2.5.0'

tomcatVersion = '7.0.25'

buildscript {
    repositories {
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = 'GitHub'
            addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
        }
    }

    dependencies { classpath 'bmuschko:gradle-tomcat-plugin:0.8.3' }
}

allprojects {

    apply plugin: 'eclipse'
    apply plugin: 'idea'

    description='Bookstore Sample Application'

    group = 'com.apress.prospringmvc'

    version = '1.0.0-SNAPSHOT'

    repositories {
        mavenRepo url: 'http://maven.springframework.org/release'
        mavenCentral()
        mavenRepo url: 'http://maven.springframework.org/milestone'
        mavenRepo url: 'https://repository.jboss.org/nexus/content/repositories/releases/'
        mavenRepo url: 'http://download.java.net/maven/glassfish/org/glassfish/'
    }

    eclipse { project.natures "org.springframework.ide.eclipse.core.springnature" }
}


webProjects = subprojects.findAll { project -> project.name.endsWith('bookstore')}

configure(webProjects) {
    apply plugin: 'war'
    apply plugin: 'jetty'
    apply plugin: 'tomcat'
    apply plugin: 'eclipse-wtp'

    dependencies() {
        compile project(':bookstore-shared'), project(':bookstore-web-resources')


        compile "org.apache.tiles:tiles-servlet:$tilesVersion"
        compile "org.apache.tiles:tiles-jsp:$tilesVersion"
        compile "org.apache.tiles:tiles-api:$tilesVersion"
        compile "org.apache.tiles:tiles-core:$tilesVersion"

        runtime "jstl:jstl:1.2"

        providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

        tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
                "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
        tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
            exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
        }
    }
}

subprojects() {
    apply plugin: 'java'

    sourceCompatibility=1.6
    targetCompatibility=1.6

    configurations { 
        all*.exclude group: 'commons-logging'
        provided 
        compile.extendsFrom provided
    }
    
    dependencies() {
        compile "org.springframework:spring-orm:$springVersion"
        compile "org.springframework:spring-aop:$springVersion"
        compile "org.springframework:spring-webmvc:$springVersion"
        compile "org.springframework:spring-oxm:$springVersion"
        
        compile 'org.slf4j:jcl-over-slf4j:1.6.4'
        compile 'ch.qos.logback:logback-classic:1.0.0'
        compile 'org.apache.commons:commons-lang3:3.0.1'
        compile 'com.thoughtworks.xstream:xstream:1.4.2'
        compile 'com.h2database:h2:1.3.164'
        compile 'cglib:cglib-nodep:2.2.2'
        compile 'org.aspectj:aspectjrt:1.6.12'
        compile 'org.aspectj:aspectjweaver:1.6.12'        
        
        compile "org.hibernate:hibernate-entitymanager:$hibernateVersion"
        compile "org.hibernate:hibernate-core:$hibernateVersion"
        compile "org.hibernate:hibernate-ehcache:$hibernateVersion"
        compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
        compile "net.sf.ehcache:ehcache-core:$ehCacheVersion"

        compile 'com.lowagie:itext:2.1.7'
        compile 'net.sourceforge.jexcelapi:jxl:2.6.12'
        compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.4'  
        compile 'commons-codec:commons-codec:1.6'
        
        testCompile 'junit:junit:4.9'
        testCompile "org.springframework:spring-test:$springVersion"
    }
}
configure(subprojects.findAll {it.name == 'chapter2-samples'}) {

    dependencies() { compile "org.springframework:spring-test:$springVersion" }
}


task wrapper(type: Wrapper) { gradleVersion = '1.0-milestone-8' }
